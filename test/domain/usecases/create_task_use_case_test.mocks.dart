// Mocks generated by Mockito 5.4.4 from annotations
// in momentum/test/domain/usecases/create_task_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:momentum/domain/entities/task.dart' as _i4;
import 'package:momentum/domain/repositories/task_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i2.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Task>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Future<_i4.Task?> getTaskById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue: _i3.Future<_i4.Task?>.value(),
      ) as _i3.Future<_i4.Task?>);

  @override
  _i3.Future<List<_i4.Task>> getTasksByDateRange(
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByDateRange,
          [
            start,
            end,
          ],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Future<List<_i4.Task>> getCompletedTasks() => (super.noSuchMethod(
        Invocation.method(
          #getCompletedTasks,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Future<List<_i4.Task>> getPendingTasks() => (super.noSuchMethod(
        Invocation.method(
          #getPendingTasks,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Future<List<_i4.Task>> getTasksByPriority(_i4.TaskPriority? priority) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByPriority,
          [priority],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Future<List<_i4.Task>> getTasksByCategory(String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByCategory,
          [category],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Future<List<_i4.Task>> getTasksByWorkspaceId(int? workspaceId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByWorkspaceId,
          [workspaceId],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Future<void> createTask(_i4.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateTask(_i4.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTask(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> toggleTaskCompletion(int? id) => (super.noSuchMethod(
        Invocation.method(
          #toggleTaskCompletion,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteCompletedTasks() => (super.noSuchMethod(
        Invocation.method(
          #deleteCompletedTasks,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<int> getTasksCount() => (super.noSuchMethod(
        Invocation.method(
          #getTasksCount,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<List<_i4.Task>> searchTasks(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchTasks,
          [query],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Stream<List<_i4.Task>> watchAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #watchAllTasks,
          [],
        ),
        returnValue: _i3.Stream<List<_i4.Task>>.empty(),
      ) as _i3.Stream<List<_i4.Task>>);
}
